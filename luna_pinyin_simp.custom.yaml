patch:
  switches:
    - name: ascii_mode
      reset: 0
      states: ["中文", "西文"]
    - name: full_shape
      states: ["半角", "全角"]
    - name: show_emoji
      reset: 1
      states: [ "🈚️️\uFE0E", "🈶️️\uFE0F" ]
    - name: zh_simp                      # (※1) 繁简转换
      reset: 1
      states: ["漢字", "汉字"]
    - options: ["utf8", "gbk", "gb2312"] # (※2)字符集选单
      reset: 0                           # 默认 UTF8
      states:
        - UTF-8
        - GBK
        - GB2312
  menu/page_size: 5   # 候选词个数
  ascii_composer/switch_key:
    Caps_Lock: commit_code                    
    Shift_L: commit_code                    # 左Shift   关闭noop
    Shift_R: commit_code                    # 右Shift
    Control_L: noop                         # 左Control
    Control_R: noop                         # 右Control
  key_binder/bindings: # 快捷键,若要开启,去掉前面的 # 号
    - { when: composing, accept: Shift+Tab, send: Shift+Left }  # "Shift+Tab" 键向左选拼音分词
    - { when: composing, accept: Tab, send: Shift+Right }       # "tab" 键选拼音分词   
    #- { when: composing, accept: Tab, send: Page_Down }        # "tab" 键翻页
    - { when: paging, accept: minus, send: Page_Up }            # "-"上一页
    - { when: has_menu, accept: equal, send: Page_Down }        # "="下一页
    - { when: paging, accept: bracketleft, send: Page_Up }      # "["上一页
    - { when: has_menu, accept: bracketright, send: Page_Down } # "]"下一页
    - { when: paging, accept: comma, send: Page_Up }            # ","上一页
    - { when: has_menu, accept: period, send: Page_Down }       # "."下一页
    - {accept: semicolon, send: 2, when: has_menu}             # 候选2 用分号
    - {accept: apostrophe, send: 3, when: has_menu}            # 候选3 用单引号
    #- {accept: "Control+a", send: Home, when: composing}                   # 光标移至首
    #- {accept: "Control+e", send: End, when: composing}                    # 光标移至尾
    #- {accept: "Control+Shift+1", select: .next, when: always}             # 切换输入方案
    #- {accept: "Control+Shift+2", toggle: ascii_mode, when: always}        # 中英文切换
    #- {accept: "Control+Shift+3", toggle: full_shape, when: always}        # 全角/半角切换
    - {accept: "Control+Shift+4", toggle: simplification, when: always}    # 繁简体切换
    #- {accept: "Control+Shift+5", toggle: extended_charset, when: always}  # 通用/增广切换（显示生僻字）
    #- {accept: Return, send: Escape, when: composing}                      # 回车清码
  simplifier:
    option_name: zh_simp

  # 启用罕见字過濾  
  engine/filters:
      - simplifier
      - simplifier@emoji_conversion
      - uniquifier
      - charset_filter@gbk              # (※3) GBK 过滤
      - single_char_filter

  emoji_conversion:
    opencc_config: emoji.json
    option_name: show_emoji
    tags: abc
    # tips: all    # Emoji 显示注释（去掉 # 开启）

# 改写拼写运算，含英文的词汇（luna_pinyin.cn_en.dict.yaml）不影响简拼
  "speller/algebra/@before 0": xform/^([b-df-hj-np-tv-z])$/$1_/

#  载入朙月拼音扩充词库
  "translator/dictionary": luna_pinyin.extended

# 加载easy_en依赖
  "schema/dependencies/@1": easy_en
# 载入翻译英文的码表翻译器，取名为 english
  "engine/translators/@4": table_translator@english
# english翻译器的设定项
  english:
    dictionary: easy_en
    spelling_hints: 9
    enable_completion: false      # 是否启用英文输入联想补全
    enable_sentence: false        # 混输时不出现带有图案的英文
    initial_quality: -0.5           # 英文候选词的位置，可以尝试 0 到 0.5 左右的数值。数值越大，英文单词出现的就越靠前。

 # 符号快速输入和部分符号的快速上屏
  punctuator:
    import_preset: symbols
    symbols:
      "/fs": [½, ‰, ¼, ⅓, ⅔, ¾, ⅒ ]
      "/xh": [ ＊, ×, ✱, ★, ☆, ✩, ✧, ❋, ❊, ❉, ❈, ❅, ✿, ✲]
      "/dq": [🌍,🌎,🌏,🌐,🌑,🌒,🌓,🌔,🌕,🌖,🌗,🌘]
      "/sg": [🍇,🍉,🍌,🍍,🍎,🍏,🍑,🍒,🍓,🍗,🍦,🎂,🍺,🍻]
      "/dw": [🙈,🐵,🐈,🐷,🐨,🐼,🐾,🐔,🐬,🐠,🦋]
      "/bq": [😀,😁,😂,😃,😄,😅,😆,😉,😊,😋,😎,😍,😘,😗]
      "/ss": [💪,👈,👉,👆,👇,✋,👌,👍,👎,✊,👊,👋,👏,👐]
    half_shape:
      "#": "#"
      "*": "*"
      "`": "`"
      "~": "~"
      "@": "@"
      "=": "="
      '\': "、"
      "%": "%"
      "$": ["¥", "$"]
      "|": ["|", "｜", "·"]
      "/": ["/", "÷"]
      "'": { pair: ["「", "」"] }
      "[": "【"
      "]": "】"
      "<": "《"
      ">": "》"

  recognizer/patterns/punct: "^/([a-z]+|[0-9]0?)$"

# 模糊拼音
  'speller/algebra':
    - erase/^xx$/                      # 第一行保留

    # 模糊音定義
    # 需要哪組就刪去行首的 # 號，單雙向任選
    #derive/^([zcs])h/$1/             # zh, ch, sh => z, c, s
    #derive/^([zcs])([^h])/$1h$2/     # z, c, s => zh, ch, sh

    #- derive/^n/l/                     # n => l
    #- derive/^l/n/                     # l => n

    # 這兩組一般是單向的
    #- derive/^r/l/                     # r => l

    #- derive/^ren/yin/                 # ren => yin, reng => ying
    #- derive/^r/y/                     # r => y

    # 下面 hu <=> f 這組寫法複雜一些，分情況討論
    #- derive/^hu$/fu/                  # hu => fu
    #- derive/^hong$/feng/              # hong => feng
    #- derive/^hu([in])$/fe$1/          # hui => fei, hun => fen
    #- derive/^hu([ao])/f$1/            # hua => fa, ...

    #- derive/^fu$/hu/                  # fu => hu
    #- derive/^feng$/hong/              # feng => hong
    #- derive/^fe([in])$/hu$1/          # fei => hui, fen => hun
    #- derive/^f([ao])/hu$1/            # fa => hua, ...

    # 韻母部份
    #- derive/^([bpmf])eng$/$1ong/      # meng = mong, ...
    #- derive/([ei])n$/$1ng/            # en => eng, in => ing
    #- derive/([ei])ng$/$1n/            # eng => en, ing => in

    # 樣例足夠了，其他請自己總結……

    # 反模糊音？
    # 誰說方言沒有普通話精確、有模糊音，就能有反模糊音。
    # 示例爲分尖團的中原官話：
    #- derive/^ji$/zii/   # 在設計者安排下鳩佔鵲巢，尖音i只好雙寫了
    #- derive/^qi$/cii/
    #- derive/^xi$/sii/
    #- derive/^ji/zi/
    #- derive/^qi/ci/
    #- derive/^xi/si/
    #- derive/^ju/zv/
    #- derive/^qu/cv/
    #- derive/^xu/sv/
    # 韻母部份，只能從大面上覆蓋
    #- derive/^([bpm])o$/$1eh/          # bo => beh, ...
    #- derive/(^|[dtnlgkhzcs]h?)e$/$1eh/  # ge => geh, se => sheh, ...
    #- derive/^([gkh])uo$/$1ue/         # guo => gue, ...
    #- derive/^([gkh])e$/$1uo/          # he => huo, ...
    #- derive/([uv])e$/$1o/             # jue => juo, lve => lvo, ...
    #- derive/^fei$/fi/                 # fei => fi
    #- derive/^wei$/vi/                 # wei => vi
    #- derive/^([nl])ei$/$1ui/          # nei => nui, lei => lui
    #- derive/^([nlzcs])un$/$1vn/       # lun => lvn, zun => zvn, ... 
    #- derive/^([nlzcs])ong$/$1iong/    # long => liong, song => siong, ...
    # 這個辦法雖從拼寫上做出了區分，然而受詞典制約，候選字仍是混的。
    # 只有真正的方音輸入方案纔能做到！但「反模糊音」這個玩法快速而有效！

    # 模糊音定義先於簡拼定義，方可令簡拼支持以上模糊音
    - abbrev/^([a-z]).+$/$1/           # 簡拼（首字母）
    - abbrev/^([zcs]h).+$/$1/          # 簡拼（zh, ch, sh）

    # 以下是一組容錯拼寫，《漢語拼音》方案以前者爲正
    #- derive/^([nl])ve$/$1ue/          # nve = nue, lve = lue
    #- derive/^([jqxy])u/$1v/           # ju = jv,
    #- derive/un$/uen/                  # gun = guen,
    #- derive/ui$/uei/                  # gui = guei,
    #- derive/iu$/iou/                  # jiu = jiou,

    # 自動糾正一些常見的按鍵錯誤
    #- derive/([aeiou])ng$/$1gn/        # dagn => dang 
    #- derive/([dtngkhrzcs])o(u|ng)$/$1o/  # zho => zhong|zhou
    #- derive/ong$/on/                  # zhonguo => zhong guo
    #- derive/ao$/oa/                   # hoa => hao
    #- derive/([iu])a(o|ng?)$/a$1$2/    # tain => tian

  # 分尖團後 v => ü 的改寫條件也要相應地擴充：
  #'translator/preedit_format':
  #  - "xform/([nljqxyzcs])v/$1ü/"

# librime-lua 输入动态时间和日期
  "engine/translators/@6": lua_translator@date_translator
